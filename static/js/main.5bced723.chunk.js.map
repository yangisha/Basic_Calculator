{"version":3,"sources":["Components/CalculatorKey.js","Components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["CalculatorKey","props","className","onClick","keyValue","Calculator","useState","histValue","setHistValue","prevValue","setPrevValue","nextValue","setNextValue","op","setOp","useEffect","CalculatorOperations","firstValue","secondValue","handleOperation","value","number","Number","isInteger","parseInt","String","temp","parseFloat","performOperation","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAaeA,MAVf,SAAuBC,GACrB,OACE,4BAAQC,UAAS,UAAKD,EAAMC,WAC1BC,QAAS,kBAAMF,EAAME,QAAQF,EAAMG,YAElCH,EAAMG,SAAU,M,MCiPRC,MArPf,WAAuB,IAAD,EACcC,mBAAS,KADvB,mBACbC,EADa,KACFC,EADE,OAEcF,mBAAS,MAFvB,mBAEbG,EAFa,KAEFC,EAFE,OAGcJ,mBAAS,KAHvB,mBAGbK,EAHa,KAGFC,EAHE,OAIAN,mBAAS,MAJT,mBAIbO,EAJa,KAITC,EAJS,KAMpBC,qBAAU,cAAU,CAACF,EAAIF,EAAWF,EAAWF,IAE/C,IAAMS,EAAuB,CAC3B,IAAK,SAACC,EAAYC,GAAb,OAA6BD,EAAaC,GAC/C,IAAK,SAACD,EAAYC,GAAb,OAA6BD,EAAaC,GAC/C,IAAK,SAACD,EAAYC,GAAb,OAA6BD,EAAaC,GAC/C,IAAK,SAACD,EAAYC,GAAb,OAA6BD,EAAaC,GAC/C,IAAK,SAACD,EAAYC,GAAb,OAA6BA,IA0E9BC,EAAkB,SAACC,GAhDP,IAACC,EAiDbC,OAAOC,UAAUH,IAjDJC,EAkDLG,SAASJ,EAAO,IAjD5BR,EAA2B,MAAdD,EAAoBc,OAAOJ,GAAUV,EAAYU,IAkDnDD,KAASJ,GACP,OAAPH,IACFC,EAAMM,GACNV,EAAaC,GACbC,EAAa,KAEXC,GACFC,EAAMM,GAEJX,GAAaI,GAAMF,GAnFF,WACvB,IAAIe,EAAOV,EAAqBH,GAC9Bc,WAAWlB,GACXkB,WAAWhB,IAEbG,EAAM,MACNF,EAAaa,OAAOC,IACpBhB,EAAa,MAEXF,EADgB,MAAdD,EAEAkB,OAAOlB,GACLkB,OAAOhB,GACP,IACAgB,OAAOhB,GACPgB,OAAOZ,GACPY,OAAOd,GACP,IAGSc,OAAOhB,GAAagB,OAAOZ,GAAMY,OAAOd,GAAa,KAiEhEiB,KAlBJhB,EAAa,KACbF,EAAa,GACbF,EAAa,OA4Bf,OACE,yBAAKN,UAAU,WACb,yBAAKA,UAAU,QAAQK,EAAvB,KACA,yBAAKL,UAAU,oBACb,yBAAKA,UAAU,UAAUS,EAAzB,MAGF,yBAAKT,UAAU,kBACb,kBAAC,EAAD,CACEA,UAAU,mBACVE,SAAU,IACVD,QA1EW,WACjBS,EAAae,WAAWhB,GAAa,KACjCF,GAA2B,KAAdE,GACfD,EAAaiB,WAAWlB,GAAa,QAyEnC,kBAAC,EAAD,CACEP,UAAU,mBACVE,SAAU,KACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,mBACVE,SAAU,IACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,mBACVE,SAAU,KACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,mBACVE,SAAU,MACVD,QArEa,WACnBS,EAAa,EAAIe,WAAWhB,IACxBF,GAA2B,KAAdE,GACfD,EAAa,EAAIiB,WAAWlB,OAoE1B,kBAAC,EAAD,CACEP,UAAU,mBACVE,SAAU,MACVD,QAxFY,WAClBS,EAAa,KAAD,IAACe,WAAWhB,GAAc,IAClCF,GAA2B,KAAdE,GACfD,EAAa,KAAD,IAACiB,WAAWlB,GAAc,OAuFpC,kBAAC,EAAD,CACEP,UAAU,mBACVE,SAAU,UACVD,QAtFgB,WACtBS,EAAa,KAAD,IAACe,WAAWhB,GAAe,KACnCF,GAA2B,KAAdE,GACfD,EAAa,KAAD,IAACiB,WAAWlB,GAAe,QAqFrC,kBAAC,EAAD,CACEP,UAAU,mBACVE,SAAU,IACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,YACVE,SAAU,EACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,YACVE,SAAU,EACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,YACVE,SAAU,EACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,mBACVE,SAAU,IACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,YACVE,SAAU,EACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,YACVE,SAAU,EACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,YACVE,SAAU,EACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,mBACVE,SAAU,IACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,YACVE,SAAU,EACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,YACVE,SAAU,EACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,YACVE,SAAU,EACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,mBACVE,SAAU,IACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,YACVE,SAAU,OACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,YACVE,SAAU,EACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,YACVE,SAAU,IACVD,QAASgB,IAEX,kBAAC,EAAD,CACEjB,UAAU,mBACVE,SAAU,IACVD,QAASgB,OCzOJU,MAJf,WACE,OAAO,kBAAC,EAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5bced723.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CalculatorKey.css\";\n\nfunction CalculatorKey(props) {\n  return (\n    <button className={`${props.className}`}\n      onClick={() => props.onClick(props.keyValue)}\n    >\n      {props.keyValue}{\" \"}\n    </button>\n  );\n}\n\nexport default CalculatorKey;","import React, { useState, useEffect } from \"react\";\nimport CalculatorKey from \"./CalculatorKey\";\nimport \"./Calculator.css\";\n\nfunction Calculator() {\n  const [histValue, setHistValue] = useState(\"0\");\n  const [prevValue, setPrevValue] = useState(null);\n  const [nextValue, setNextValue] = useState(\"0\");\n  const [op, setOp] = useState(null);\n\n  useEffect(() => {}, [op, nextValue, prevValue, histValue]);\n\n  const CalculatorOperations = {\n    \"/\": (firstValue, secondValue) => firstValue / secondValue,\n    \"*\": (firstValue, secondValue) => firstValue * secondValue,\n    \"+\": (firstValue, secondValue) => firstValue + secondValue,\n    \"-\": (firstValue, secondValue) => firstValue - secondValue,\n    \"=\": (firstValue, secondValue) => secondValue,\n  };\n\n  const performOperation = () => {\n    let temp = CalculatorOperations[op](\n      parseFloat(prevValue),\n      parseFloat(nextValue)\n    );\n    setOp(null);\n    setNextValue(String(temp));\n    setPrevValue(null);\n    if (histValue !== \"0\") {\n      setHistValue(\n        String(histValue) +\n          String(prevValue) +\n          \",\" +\n          String(prevValue) +\n          String(op) +\n          String(nextValue) +\n          \"=\"\n      );\n    } else {\n      setHistValue(String(prevValue) + String(op) + String(nextValue) + \"=\");\n    }\n  };\n\n  const handleNum = (number) => {\n    setNextValue(nextValue === \"0\" ? String(number) : nextValue + number);\n  };\n\n  const insertDot = () => {\n    if (!/\\./.test(nextValue)) {\n      setNextValue(nextValue + \".\");\n    }\n  };\n\n  const percentage = () => {\n    setNextValue(parseFloat(nextValue) / 100);\n    if (prevValue && nextValue === \"\") {\n      setPrevValue(parseFloat(prevValue) / 100);\n    }\n  };\n\n  const changeSign = () => {\n    setNextValue(parseFloat(nextValue) * -1);\n  };\n\n  const squareValue = () => {\n    setNextValue(parseFloat(nextValue) ** 2);\n    if (prevValue && nextValue === \"\") {\n      setPrevValue(parseFloat(prevValue) ** 2);\n    }\n  };\n\n  const squareRootValue = () => {\n    setNextValue(parseFloat(nextValue) ** (1 / 2));\n    if (prevValue && nextValue === \"\") {\n      setPrevValue(parseFloat(prevValue) ** (1 / 2));\n    }\n  };\n\n  const inverseValue = () => {\n    setNextValue(1 / parseFloat(nextValue));\n    if (prevValue && nextValue === \"\") {\n      setPrevValue(1 / parseFloat(prevValue));\n    }\n  };\n\n  const clearData = () => {\n    setNextValue(\"0\");\n    setPrevValue(0);\n    setHistValue(\"0\");\n  };\n\n  const handleOperation = (value) => {\n    if (Number.isInteger(value)) {\n      handleNum(parseInt(value, 10));\n    } else if (value in CalculatorOperations) {\n      if (op === null) {\n        setOp(value);\n        setPrevValue(nextValue);\n        setNextValue(\"\");\n      }\n      if (op) {\n        setOp(value);\n      }\n      if (prevValue && op && nextValue) {\n        performOperation();\n      }\n    } else if (value === \"C\" || \"CE\") {\n      clearData();\n    } else if (value === \"\\xB1\") {\n      changeSign();\n    } else if (value === \".\") {\n      insertDot();\n    } else if (value === \"+/-\") {\n    }\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"hist\">{histValue} </div>\n      <div className=\"calculator-input\">\n        <div className=\"result\">{nextValue} </div>\n      </div>\n\n      <div className=\"grid-container\">\n        <CalculatorKey\n          className=\"grid-item key-op\"\n          keyValue={\"%\"}\n          onClick={percentage}\n        />\n        <CalculatorKey\n          className=\"grid-item key-op\"\n          keyValue={\"CE\"}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item key-op\"\n          keyValue={\"C\"}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item key-op\"\n          keyValue={\"--\"}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item key-op\"\n          keyValue={\"1/x\"}\n          onClick={inverseValue}\n        />\n        <CalculatorKey\n          className=\"grid-item key-op\"\n          keyValue={\"x^2\"}\n          onClick={squareValue}\n        />\n        <CalculatorKey\n          className=\"grid-item key-op\"\n          keyValue={\"x^(1/2)\"}\n          onClick={squareRootValue}\n        />\n        <CalculatorKey\n          className=\"grid-item key-op\"\n          keyValue={\"/\"}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item\"\n          keyValue={7}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item\"\n          keyValue={8}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item\"\n          keyValue={9}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item key-op\"\n          keyValue={\"*\"}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item\"\n          keyValue={4}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item\"\n          keyValue={5}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item\"\n          keyValue={6}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item key-op\"\n          keyValue={\"-\"}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item\"\n          keyValue={1}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item\"\n          keyValue={2}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item\"\n          keyValue={3}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item key-op\"\n          keyValue={\"+\"}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item\"\n          keyValue={\"±\"}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item\"\n          keyValue={0}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item\"\n          keyValue={\".\"}\n          onClick={handleOperation}\n        />\n        <CalculatorKey\n          className=\"grid-item key-op\"\n          keyValue={\"=\"}\n          onClick={handleOperation}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport Calculator from \"./Components/Calculator\";\n\n\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}